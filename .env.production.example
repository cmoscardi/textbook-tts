# PostgreSQL Configuration
POSTGRES_HOST=your-postgres-host.com
POSTGRES_PORT=5432
POSTGRES_PASSWORD=your-secure-password-here
POSTGRES_USER=postgres
PGUSER=$POSTGRES_USER
POSTGRES_DB=postgres
CELERY_DB=celery_prod

# Database URLs
DATABASE_URL="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB?schema=public"
DATABASE_CELERY_URL="db+postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$CELERY_DB"

# RabbitMQ Configuration
RABBITMQ_HOST=rabbitmq-prod
RABBITMQ_USER=admin
RABBITMQ_PASS=change-this-to-a-secure-password

# ML Service Configuration
MLSERVICE_PORT=8001
MLSERVICE_HOST=https://your-ml-service-domain.com

# Supabase Configuration (Production)
# Get these from your production Supabase project dashboard
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_ROLE_KEY=your-production-service-role-key-here

# ML Service Authentication
# Generate a strong random key for production (e.g., using: openssl rand -base64 32)
MLSERVICE_AUTH_KEY=your-secure-random-auth-key-here

# IMPORTANT NOTES:
# 1. Copy this file to .env.production and fill in actual values
# 2. NEVER commit .env.production to version control
# 3. Use proper secrets management in production (AWS Secrets Manager, etc.)
# 4. Ensure SUPABASE_SERVICE_ROLE_KEY is the full JWT token, not the shortened format
# 5. Use strong passwords for all services
# 6. Consider using docker secrets instead of env files for sensitive data
