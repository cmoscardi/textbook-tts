# Nginx reverse proxy configuration for ML Service
# Place this in /etc/nginx/sites-available/ and symlink to sites-enabled

upstream ml_service {
    server localhost:8001;
    keepalive 64;
}

# Rate limiting zone
limit_req_zone $binary_remote_addr zone=ml_limit:10m rate=10r/s;

# HTTP server - redirect to HTTPS
server {
    listen 80;
    server_name your-ml-service-domain.com;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name your-ml-service-domain.com;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/your-ml-service-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-ml-service-domain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Logging
    access_log /var/log/nginx/ml-service-access.log;
    error_log /var/log/nginx/ml-service-error.log;

    # Client body size limit (for file uploads)
    client_max_body_size 100M;

    # Proxy settings
    location / {
        # Rate limiting
        limit_req zone=ml_limit burst=20 nodelay;

        proxy_pass http://ml_service;
        proxy_http_version 1.1;

        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        # Timeouts (increased for ML processing)
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Buffering
        proxy_buffering off;
    }

    # Health check endpoint (no rate limiting)
    location /health {
        proxy_pass http://ml_service/health;
        access_log off;
    }
}

# Optional: RabbitMQ Management UI (with basic auth)
# Uncomment if you want to expose RabbitMQ management interface
# server {
#     listen 443 ssl http2;
#     server_name rabbitmq.your-domain.com;
#
#     ssl_certificate /etc/letsencrypt/live/rabbitmq.your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/rabbitmq.your-domain.com/privkey.pem;
#
#     location / {
#         auth_basic "RabbitMQ Management";
#         auth_basic_user_file /etc/nginx/.htpasswd;
#
#         proxy_pass http://localhost:15672;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }
